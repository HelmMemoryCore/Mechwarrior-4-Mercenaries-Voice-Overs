//*********************************************************************************

fsm Thark02_Resupply : integer;		

//------------------------------------------------------------------
//
//     Constant Definitions
//
//------------------------------------------------------------------
     const

		#include_ <content\ABLScripts\mwconst.abi>
//------------------------------------------------------------------
//
//     Type Definitions
//
//------------------------------------------------------------------
     type

		#include_ <content\ABLScripts\mwtype.abi>

//------------------------------------------------------------------
//
//     Variable Declarations
//
//------------------------------------------------------------------
	var
		static objectID		unitPath;					// Path that the unit follows
		static integer		speed;						// speed at which the Convoy travels
		static integer		memint9;
		static objectID		dockPoint;
		static boolean		PathEndReached;
		static integer		checkRange;
		
function Init;
	code
	
	speed = 70;
	unitPath = epa_FriendlyPath01;
	memint9 = GetMemoryInteger(me,9);
	setTargetDesirability(me, 0);	//Enemies only shoot at convoy if no other targets are available
	checkNav = ena_nav_alpha;
	
	switch (memint9)
		case 1:
			dockPoint = ena_Barge01Dock;
			checkRange = 80;
		endcase;
		case 2:
			dockPoint = ena_Barge02Dock;
			checkRange = 30;
		endcase;
		case 3:
			dockPoint = ena_Barge03Dock;
		endcase;
	endswitch;
	
	   
endfunction;

state startState;
	code
   	trans sit;
endstate;

state sit;

	code
	
	if IsWithin(me, dockPoint, 250) then
		switch memint9
			case 1:
				//Last convoy member, no need to stop others.
			endcase;
			case 2:
				if (not obj2) then
					checkNav = ena_nav_beta;
					stopConvoy = true;
				endif;
			endcase;
			case 3:
				if (not obj1) then
					checkNav = ena_nav_alpha;
					stopConvoy = true;
				endif;
			endcase;
		endswitch;
		trans DockState;
	else
		if (not stopConvoy) then
			OrderMoveResumePatrol(unitPath, speed, MOVE_NOCYCLE, true, false);
		else
			if IsWithin(me, CheckNav, checkRange) then
				orderMoveLookOut;
			else
				OrderMoveResumePatrol(unitPath, speed, MOVE_NOCYCLE, true, false);
			endif;
		endif;
	endif;
		
	if isDead(me) then
		trans deadstate;
	endif;
	
endstate;

state dockState;
	code
	
	OrderMoveToObject(dockPoint, speed);
	if IsWithin(me, dockPoint, 25) then
		clearMoveOrder(me);
		trans deadState;
	endif;
		
endstate;

state deadState;
	code

endstate;
	
endfsm.
