//*********************************************************************************

fsm mechs : integer;		

//------------------------------------------------------------------
//
//     Constant Definitions
//
//------------------------------------------------------------------
     const

		#include_ <content\ABLScripts\mwconst.abi>
//------------------------------------------------------------------
//
//     Type Definitions
//
//------------------------------------------------------------------
     type

		#include_ <content\ABLScripts\mwtype.abi>

//------------------------------------------------------------------
//
//     Variable Declarations
//
//------------------------------------------------------------------
	var
		static integer			attackRange;	// At what range do I start shooting?
		static integer			withdrawRange;	// At what range do I stop attacking?
		static integer			skillLevel;		// 1 - 10
		static integer			memInt9;		// value of Memory Integer number 9
		static integer			MoveType;		
		static boolean			pathEndReached;

		static ObjectID			unitPath;		// the path the units follow
		static LocPoint			spawnPoint;
		static LocPoint			leashPoint;
		
		static integer			waitTimer;

 function Init;
	code
		// script-specific variables
		attackRange				= 800;
		withdrawRange			= attackRange * 3 / 2;
		skillLevel				= 2;						// 1 - 10
		memInt9 				= GetMemoryInteger(me, 9);	// Value of memory integer number 9
		pathEndReached 			= false;
		unitPath 				= NO_UNIT;
		
		waitTimer				= gti_timer_10;

		switch (memint9)
			case 1:
				getLocation(ena_SpawnPoint01, spawnPoint);
				getLocation(me, leashPoint);
			endcase;
			case 2:
				getLocation(ena_SpawnPoint02, spawnPoint);
				getLocation(me, leashPoint);
				memint9 = 1;
			endcase;
			case 3:
				getLocation(ena_SpawnPoint03, spawnPoint);
				getLocation(me, leashPoint);
				memint9 = 1;
			endcase;
			case 4:
				pathendreached = true;
				shutdown(me);
			endcase;
		endswitch;
		
endfunction;
		
state StartState;

	code
	
	if (memint9 == 5) then
		shutdown(me);
		trans deadstate;	//parkinglot mechs
	else
		if startTheFun then
			AssignSkill(skillLevel);
			resetTimer(gti_timer_4);
			trans WaitforLaunch;
		endif;
	endif; 	

endstate;

state WaitforLaunch;
	code
	
		switch (memint9)
			case 1:
				SetCombatLeash(me, leashPoint, 150);
				trans InBaseState;
			endcase;
			case 4:
				if TimeGreater(gti_timer_4, 170) then
					startup(me);
					trans sit;
				endif;
			endcase;
		endswitch;
		
endstate;		

state sit;
	code
		
		if (not pathEndReached) then
			if OrderMoveResumePatrol(unitPath, 200, MOVE_NOCYCLE, true, true) then
				pathEndReached = true;
			endif;
		else
			OrderMoveLookout;
		endif;
		
		if FindEnemy(attackRange, FT_DEFAULT) then
			trans attackState;
		endif;
		
		if ( isShot ( me ) ) then
			setTarget(me, whoShot(me) );
			trans AttackState;
		endif;
		
		if isdead(me) then
			GroupRemoveObject(BaseGroup, me);
			trans deadState;
		endif;
		
endstate;

state AttackState;

	code
	
		if  leaveAttackState(withdrawrange) or obj4 then
			orderStopAttacking;
			settarget(me, NO_UNIT);
			trans sit;
		else
			OrderAttackTactic(TACTIC_PICK_BEST, true);
		endif;
		
		if ( isShot ( me ) ) then
			setTarget(me, whoShot(me) );
		endif;
		
		if isdead(me) then
			GroupRemoveObject(BaseGroup, me);
			trans deadState;
		endif;
		
endstate;

state InBaseState;
	code
	
		if FindEnemy(attackRange, FT_DEFAULT) then
			OrderAttackTactic(TACTIC_PICK_BEST, true);
		else
			OrderMoveLookout;
		endif;
		
		if ( isShot ( me ) ) then
			setTarget(me, whoShot(me) );
			OrderAttackTactic(TACTIC_PICK_BEST, true);
		endif;
		
		if isdead(me) then
			GroupRemoveObject(BaseGroup, me);
			trans deadState;
		endif;
		
		if follow then
			unitPath = epa_friendlyPath;
			pathEndReached = false;
			SetCombatLeash(me, leashPoint, 0);	//Remove Combat Leash
			clearMoveOrder(me);
			OrderMoveResumePatrol(unitPath, 200, MOVE_NOCYCLE, true, false);
			resetTimer(4);
			trans followState;
		endif;
		
		if obj1Failed then
			unitPath = epa_returnPath;
			skillLevel = 6;
			AssignSkill(skillLevel);
			clearMoveOrder(me);
			OrderMoveResumePatrol(unitPath, 200, MoveType, true, false);
			trans sit;
		endif;
		
endstate;

state followState;
	code
	
		if (not pathEndReached) then
			if OrderMoveResumePatrol(unitPath, 200, MOVE_NOCYCLE, true, false) then
				pathEndReached = true;
			endif;
		else
			clearMoveOrder(me);
			teleport(me, spawnPoint);
			if obj1 then
				resetTimer(waitTimer);
				pathEndReached = false;
				trans waitForReturn;
			endif;
		endif;
		
		if FindEnemy(attackRange, FT_DEFAULT) then
			OrderAttackTactic(TACTIC_PICK_BEST, false);
		endif;
		
		if isdead(me) then
			GroupRemoveObject(BaseGroup, me);
			trans deadState;
		endif;
		
		if timeGreater(4, 90) then		//In case a mech gets stuck, this will take care of it.
			pathEndReached = true;
		endif;
		
endstate;

state waitForReturn;
	code
	
		if timeGreater(waitTimer, 120) or (obj2 and obj3) then
			unitPath = epa_returnPath;
			skillLevel = 6;
			AssignSkill(skillLevel);
			trans sit;
		endif;

		if FindEnemy(attackRange, FT_DEFAULT) then
			OrderAttackTactic(TACTIC_PICK_BEST, true);
		else
			OrderMoveLookout;
		endif;
		
		if isdead(me) then
			GroupRemoveObject(BaseGroup, me);
			trans deadState;
		endif;
		
endstate;

state deadstate;
	code
		
endstate;

endfsm.
