//*********************************************************************************

fsm mechs : integer;		

//------------------------------------------------------------------
//
//     Constant Definitions
//
//------------------------------------------------------------------
     const

		#include_ <content\ABLScripts\mwconst.abi>
//------------------------------------------------------------------
//
//     Type Definitions
//
//------------------------------------------------------------------
     type

		#include_ <content\ABLScripts\mwtype.abi>

//------------------------------------------------------------------
//
//     Variable Declarations
//
//------------------------------------------------------------------
	var
		static integer			attackRange;	// At what range do I start shooting?
		static integer			withdrawRange;	// At what range do I stop attacking?
		static integer			skillLevel;		// 1 - 10
		static integer			memInt9;		// value of Memory Integer number 9
		
		static boolean			pathEndReached;
		static ObjectID			unitPath;		// the path the units follow
		static LocPoint			spawnPoint;

 function Init;
	code
		// script-specific variables
		attackRange				= 800;
		withdrawRange			= attackRange * 3 / 2;
		skillLevel				= 7;						// 1 - 10
		memInt9 				= GetMemoryInteger(me, 9);	// Value of memory integer number 9
		pathEndReached 			= false;
		GetLocation(me, spawnPoint);

		switch(memInt9)
			case 1:
				unitPath = epa_wakeUpPath01;
			endcase;
			case 2:
				unitPath = epa_wakeUpPath02;
			endcase;
			case 3:
				unitPath = NO_UNIT;
				pathEndReached = true;
			endcase;
			case 4:
				unitPath = epa_MechPath01;
			endcase;
			case 5:
				unitPath = NO_UNIT;
				pathEndReached = true;
			endcase;
		endswitch;
		
		SetAlignment(me, FA_NEUTRAL);
		
endfunction;
		
state StartState;

	code
	
	AssignSkill(skillLevel);
	clearMoveOrder(me);
	shutDown(me);
	if (memint9 == 5) then
		teleportToHell(me);
	endif;
	trans WaitforLaunch; 	

endstate;

state WaitforLaunch;
	
	code
	switch(memInt9)
		case 1:
			if GammaReached or (GroupNumDead(GroupObjectID(23)) > 2) then
				startup(me);
				SetAlignment(me, FA_ENEMY);
				trans sit;
			endif;
			//wake up if the player starts taking us out in the spaceport
			if (not obj1) or (not obj2) then
				if (groupNumDead(groupObjectID(20)) > 0) or (groupNumDead(groupObjectID(21)) > 0) then
					assignSkill(skillLevel+1);
					startup(me);
					SetAlignment(me, FA_ENEMY);
					trans sit;
				endif;
			endif;
		endcase;
		case 2:
			if obj4 then
				startup(me);
				SetAlignment(me, FA_ENEMY);
				trans sit;
			endif;
			//wake up if the player starts taking us out in the spaceport
			if (not obj1) or (not obj2) then
				if (groupNumDead(groupObjectID(20)) > 0) or (groupNumDead(groupObjectID(21)) > 0) then
					assignSkill(skillLevel+1);
					startup(me);
					SetAlignment(me, FA_ENEMY);
					trans sit;
				endif;
			endif;
		endcase;
		case 3:
			if startTheFun then
				startup(me);
				SetAlignment(me, FA_ENEMY);
				trans sit;
			endif;
		endcase;
		case 4:
			if isWithin(playerMech, GroupObjectID(23), 975) or gammaReached then
				startup(me);
				SetAlignment(me, FA_ENEMY);
				trans sit;
			endif;
		endcase;
		case 5:
			if obj4 then
				teleport(me, spawnPoint);
				startup(me);
				SetAlignment(me, FA_ENEMY);
				trans sit;
			endif;
		endcase;
	endswitch;
	
			
		
		
endstate;		

state sit;
	code
		if pathEndReached then
			orderMoveToObject(playermech, 200);
		else
			if OrderMoveResumePatrol(unitPath, 200, MOVE_NOCYCLE, true, true) then
				pathEndReached = true;
			endif;
		endif;
		
		if FindEnemy(attackRange, FT_DEFAULT+FT_UNARMED) then
			trans attackState;
		endif;
		
		if ( isShot ( me ) ) then
			setTarget(me, whoShot(me) );
			trans AttackState;
		endif;
		
		if isdead(me) then
			trans deadState;
		endif;
		
endstate;

state AttackState;

	code
	
		if( leaveAttackState(withdrawrange) ) then
			orderStopAttacking;
			settarget(me, NO_UNIT);
			trans sit;
		else;
			OrderAttackTactic(TACTIC_PICK_BEST, true);
		endif;
		
		if ( isShot ( me ) ) then
			setTarget(me, whoShot(me) );
		endif;
		
		if isdead(me) then
			trans deadState;
		endif;
			
endstate;

state deadstate;
	code
		
endstate;

endfsm.
