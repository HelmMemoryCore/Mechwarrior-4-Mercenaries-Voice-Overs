//*********************************************************************************

fsm Runners : integer;		

//------------------------------------------------------------------
//
//     Constant Definitions
//
//------------------------------------------------------------------
     const

		#include_ <content\ABLScripts\mwconst.abi>
//------------------------------------------------------------------
//
//     Type Definitions
//
//------------------------------------------------------------------
     type

		#include_ <content\ABLScripts\mwtype.abi>

//------------------------------------------------------------------
//
//     Variable Declarations
//
//------------------------------------------------------------------
	var
		static integer			attackRange;	// At what range do I start shooting?
		static integer			withdrawRange;	// At what range do I stop attacking?
		static integer			skillLevel;		// 1 - 10
		static integer			memInt9;		// value of Memory Integer number 9
		static boolean			pathEndReached;

		static ObjectID			unitPath;		// the path the units follow
		static LocPoint			spawnPoint;
		static LocPoint			leashPoint;
		
		static boolean			runAway;		// Used to determin when the cougars run away
		static boolean			atBase;			// Used to determin when the cougars are in the base

 function Init;
	code
		// script-specific variables
		attackRange				= 800;
		withdrawRange			= 1000;
		skillLevel				= 6;						// 1 - 10
		memInt9 				= GetMemoryInteger(me, 9);	// Value of memory integer number 9
		pathEndReached 			= false;
		unitPath 				= epa_runPath;
		runAway					= false;
		AtBase					= false;

		
endfunction;
		
state StartState;

	code
	
	AssignSkill(skillLevel);
	trans sit; 	

endstate;

state sit;
	code
	
		if runAway then
            if pathEndReached then
				OrderMoveLookout;
			else
				if OrderMoveResumePatrol(unitPath, 200, MOVE_NOCYCLE, true, false) then
					pathEndReached = true;
				endif;
			endif;
		else
			orderMoveLookOut;
		endif;
		
		if not atBase then
			if IsWithin(me, ena_RunPathEnd, 200) then
				runAway = false;
				atBase = true;
				pathEndReached = true;
			endif; 
		endif; 	
		
		if ( SetMyTarget(attackRange) ) then
			trans AttackState;
		endif;
		
		if ( isShot ( me ) ) then
			setTarget(me, whoShot(me) );
			trans AttackState;
		endif;
		
		if isdead(me) then
			trans deadState;
		endif;
		
endstate;

state AttackState;

	code
	
		if( leaveAttackState(withdrawrange) ) then
			orderStopAttacking;
			settarget(me, NO_UNIT);
			trans sit;
		else;
			OrderAttackTactic(TACTIC_PICK_BEST, (not RunAway));
		endif;
		
		if ( isShot ( me ) ) then
			setTarget(me, whoShot(me) );
		endif;
		
		if isdead(me) then
			trans deadState;
		endif;
		
		if (not atBase) then
			if IsWithin(me, ena_RunPathEnd, 200) then
				runAway = false;
				atBase = true;
				pathEndReached = true;
			endif;
			 
			if obj1 or (GroupNumDead(AlphaGroup) > 1) then
				RunAway = true;
				trans sit;
			endif;
		endif;
		
endstate;

state deadstate;
	code
		
endstate;

endfsm.
