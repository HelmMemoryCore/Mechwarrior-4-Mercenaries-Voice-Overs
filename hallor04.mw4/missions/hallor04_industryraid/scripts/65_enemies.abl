//*********************************************************************************

fsm H04_enemiesInBase : integer;		

//------------------------------------------------------------------
//
//     Constant Definitions
//
//------------------------------------------------------------------
     const

		#include_ <content\ABLScripts\mwconst.abi>
//------------------------------------------------------------------
//
//     Type Definitions
//
//------------------------------------------------------------------
     type

		#include_ <content\ABLScripts\mwtype.abi>

//------------------------------------------------------------------
//
//     Variable Declarations
//
//------------------------------------------------------------------
	var
		static integer			attackRange;	// At what range do I start shooting?
		static integer			withdrawRange;	// At what range do I stop attacking?
		static integer			skillLevel;		// 1 - 10
		static integer			memInt9;		// value of Memory Integer number 9
		static boolean			pathEndReached;

		static ObjectID			unitPath;		// the path the units follow
		static LocPoint			spawnPoint;

 function Init;
	code
		// script-specific variables
		attackRange				= 800;
		withdrawRange			= attackRange * 3 / 2;
		skillLevel				= 3;						// 1 - 10
		memInt9 				= GetMemoryInteger(me, 9);	// Value of memory integer number 9

		unitPath = epa_ResponcePath;
		pathEndReached = false;

endfunction;
		
state StartState;

	code
	
	AssignSkill(skillLevel);
	trans WaitforLaunch; 	

endstate;

state WaitforLaunch;
	
	code
	
		if obj1 then
			trans sit;
		endif;
		
		if (IsWithin(playerMech, ena_triggerPoint01, 120)) then
			if (not obj1) then
				triggerAlarm = true;
			endif;
		endif;
		
		if (IsWithin(playerMech, ena_triggerPoint02, 120)) then
			if (not obj1) then
				triggerAlarm = true;
			endif;
		endif;
		
		if (IsWithin(playerMech, GroupObjectID(10), 700)) then
			if (not obj1) then
				triggerAlarm = true;
			endif;
		endif;
	
		if triggerAlarm then
			AssignSkill(skillLevel+1);
			trans sit;
		endif;
		
		if ( isShot ( me ) ) then
			trans sit;
		endif;
	
endstate;		

state sit;
	code
		if (not pathEndReached) then
			if OrderMoveResumePatrol(unitPath, 200, MOVE_NOCYCLE, true, true) then
				pathEndReached = true;
			endif;
		else
			OrderMoveLookout;
		endif;
		
		if ( SetMyTarget(attackRange) ) then
			trans AttackState;
		endif;
		
		if ( isShot ( me ) ) then
			setTarget(me, whoShot(me) );
			trans AttackState;
		endif;
		
		if isdead(me) then
			trans deadState;
		endif;
		
		if obj5Revealed then
			trans runState;
		endif;
		
endstate;

state AttackState;

	code
	
		if( leaveAttackState(withdrawrange) ) then
			orderStopAttacking;
			settarget(me, NO_UNIT);
			trans sit;
		else;
			OrderAttackTactic(TACTIC_PICK_BEST, true);
		endif;
		
		if ( isShot ( me ) ) then
			setTarget(me, whoShot(me) );
		endif;
		
		if isdead(me) then
			trans deadState;
		endif;
		
		if obj5Revealed then
			trans runState;
		endif;
			
endstate;

state runState;
	code
	
		if OrderMoveResumePatrol(epa_retreatPath, 200, MOVE_NOCYCLE, true, False) then
			clearMoveOrder(me);
			teleportToHell(me);
		endif;
		
endstate;

state deadstate;
	code
		
endstate;

endfsm.
