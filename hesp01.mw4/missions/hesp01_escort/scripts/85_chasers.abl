//*********************************************************************************

fsm Hesp01_Chasers : integer;		

//------------------------------------------------------------------
//
//     Constant Definitions
//
//------------------------------------------------------------------
     const

		#include_ <content\ABLScripts\mwconst.abi>
//------------------------------------------------------------------
//
//     Type Definitions
//
//------------------------------------------------------------------
     type

		#include_ <content\ABLScripts\mwtype.abi>

//------------------------------------------------------------------
//
//     Variable Declarations
//
//------------------------------------------------------------------
	var
		static integer			attackRange;	// At what range do I start shooting?
		static integer			withdrawRange;	// At what range do I stop attacking?
		static integer			skillLevel;
		static integer			speed;
		static integer			memInt9;

		static ObjectID			unitPath;		// the path the units follow	
		static LocPoint			spawnPoint;
		
 function Init;
	code
		// script-specific variables
		attackRange				= 800;
		withdrawRange			= attackRange * 3 / 2;
		skillLevel				= 5;
		speed					= 200;
		unitPath				= epa_ConvoyPath;
        memInt9 				= GetMemoryInteger(me, 9);
		
		switch(memint9)
			case 1:
				getLocation(ena_spawnPoint01, spawnPoint);
			endcase;			 
			case 2:
				getLocation(ena_spawnPoint02, spawnPoint);
			endcase;
		endswitch;
		
		clearMoveOrder(me);
		shutDown(me);
		  		 
endfunction;
		
state StartState;

	code
	AssignSkill(skillLevel);
    trans waitState;
endstate;			

state waitState;

	code
	
	if launchChasers then	//set in main abl script
		teleport(me, spawnPoint);
		startup(me);
		trans sit;
	endif;
	
endstate;			

state sit;
	code
		if FindEnemy(attackRange, FT_DEFAULT + FT_UNARMED) then
			trans attackState;
		endif;
		
		if ( isShot ( me ) ) then
			setTarget(me, whoShot(me) );
			trans AttackState;
		endif;
		
		if ( isDead(me)) then
			trans deadstate;
		endif;
		
		OrderMoveResumePatrol(unitPath, speed, MOVE_NOCYCLE, true, true);
		
endstate;

state AttackState;

	code
	
		if( leaveAttackState(withdrawrange) ) then
			orderStopAttacking;
			settarget(me, NO_UNIT);
			trans sit;
		else
			OrderAttackTactic(TACTIC_PICK_BEST, true);
		endif;
		
		if ( isDead(me)) then
			trans deadstate;
		endif;
			
endstate;

state deadstate;
	code
		
endstate;

endfsm.
