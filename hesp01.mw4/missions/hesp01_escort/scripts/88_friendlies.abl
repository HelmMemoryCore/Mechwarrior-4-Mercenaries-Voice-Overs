//*********************************************************************************

fsm H01_friendlies : integer;		

//------------------------------------------------------------------
//
//     Constant Definitions
//
//------------------------------------------------------------------
     const

		#include_ <content\ABLScripts\mwconst.abi>
//------------------------------------------------------------------
//
//     Type Definitions
//
//------------------------------------------------------------------
     type

		#include_ <content\ABLScripts\mwtype.abi>

//------------------------------------------------------------------
//
//     Variable Declarations
//
//------------------------------------------------------------------
	var
		static integer			attackRange;	// At what range do I start shooting?
		static integer			withdrawRange;	// At what range do I stop attacking?
		static integer			skillLevel;		// 1 - 10
		static integer			memInt9;		// value of Memory Integer number 9
		static boolean			pathEndReached;

		static integer			speed;			// speed
		static ObjectID			unitPath;		// the path the units follow

 function Init;
	code
		// script-specific variables
		attackRange				= 600;
		withdrawRange			= attackRange * 3 / 2;
		skillLevel				= 5;						// 1 - 10
		memInt9 				= GetMemoryInteger(me, 9);	// Value of memory integer number 9
		speed					= 200;

		switch(memInt9)
			case 0:
				//unitPath = epa_hoverPath;
			endcase;
		endswitch;
		
		pathEndReached = false;

endfunction;
		
state StartState;

	code
	
		AssignSkill(skillLevel);
        trans sit;
		 	
endstate;


state sit;
	code
		if ( SetMyTarget(attackRange) ) then
			trans AttackState;
		endif;
		if ( isShot ( me ) ) then
			setTarget(me, whoShot(me) );
			trans AttackState;
		endif;
		
		if isdead(me) then
			trans deadState;
		endif;
		
		OrderMoveLookout;
		
endstate;

state AttackState;

	code
	
		if( leaveAttackState(withdrawrange) ) then
			orderStopAttacking;
			settarget(me, NO_UNIT);
			trans sit;
		else;
			OrderAttackTactic(TACTIC_PICK_BEST, true);
		endif;
		
		if ( isShot ( me ) ) then
			setTarget(me, whoShot(me) );
		endif;
		
		if isdead(me) then
			trans deadState;
		endif;
			
endstate;

state deadstate;
	code
		
endstate;

endfsm.
