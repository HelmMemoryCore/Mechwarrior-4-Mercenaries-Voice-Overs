
//------------------------------------------------------------------
// NOTE: The fsm name below MUST be changed in order for the
// script to be considered a unique entity!
//------------------------------------------------------------------

fsm Bandits : integer;


//------------------------------------------------------------------
// Moving AI:
//   This script controls movers that do not go aggressive.
//------------------------------------------------------------------

//------------------------------------------------------------------
//     Constants
//------------------------------------------------------------------

	const
		#include_ <content\ABLScripts\mwconst.abi>

//------------------------------------------------------------------
//     Types
//------------------------------------------------------------------

	type
		#include_ <content\ABLScripts\mwtype.abi>
	
//------------------------------------------------------------------
//     Variables
//------------------------------------------------------------------

	var
		
    // Standard Mech and Vehicle variables
        static integer			attackRange;		// At what range do I start shooting?
		static integer			withdrawRange;		// At what range do I withdraw from combat completely?
                                                    //
		static integer			SkillLevel;			// Used by Assign Skill for the difficulty of an enemy
		static integer			piloting;			// Piloting skill
		static integer			gunnery;			// Gunnery skill/chance to hit
		static real				minDelay;			// Minimum amount of time I will wait between shots once a weapon is reloaded
		static real				maxDelay;			// Maximum amount of time I will wait between shots once a weapon is reloaded
		static integer 			eliteLevel;			// Elite level.  This helps determine tactics, defensive manuevers, opportunity fire
													// and other things.  It indicates a general level of combat experience.
		static integer			attackThrottle;		// My attack throttle
		static integer			mytactic;			// Combat tactic I use - 0 means standard attack
		static integer			findTypes;			// What kind of enemies to look for
													//
        static integer			path;	            // What path to take.
		static integer			myobject;			// Where this unit will head to
        static integer			speed;	            // Speed on the path.
		static integer			MyGroup;			// Which MemoryInteger you work for
		static integer			GroupNumber;		// What's my group -- i.e. I will use GroupObjectID(groupNumber) to identify my group
		static integer			formationType;		// What kind of formation am I in?
		static integer			formationDensity;	// How densely are we packed?
		static integer			moveType;			// How I move along the path
                                                    //
 		static integer			isShotRadius;		// How far away from me will I detect an enemy shot?
                                                    //
		static integer 			attackSound;		// The attack sound I play when I first attack
		static integer 			deathSound;			// The sound I play when I die
		                                            //
		static integer			mood;				// My default 
		static integer			takeOffDistance;	// My take-off distance if I'm an airplane (ignored if not an airplane)
    //
		
	// Generic Special Unit Functions	
		static boolean			ToHell;				// I am going to teleport to hell
		static boolean			PowerDown;		   	// I start off shutdown
		static boolean			Visible;			// Am I on radar
		static boolean			RadarOff;			// This 'Mech doesn't use radar (no missile boats!)
		static boolean			AmPlane;			// I am a plane unit
	// 
		
//------------------------------------------------------------------
//     Init: my initialization function
//------------------------------------------------------------------

function Init;
	code
		// script-specific variables
		attackRange		= 1000;
		withdrawRange	= AttackRange * 3 / 2;
		//path			= epa_convoypath;
		moveType		= move_nocycle;
		speed			= 50;
		formationType	= formation_1x12Line;
		formationDensity= formtype_sparse;
		findTypes		= FT_DEFAULT;

		takeOffDistance	= 150;

		// driver settings
		SkillLevel		= 4;
		attackSound		= -1; // no sound
		deathSound		= -1; // no sound
		mood			= NEUTRAL_START;
		
		visible 		= TRUE;

        switch (GetMemoryInteger(me,9))
        
            case 3:		// Mainforce
				MyObject		= ena_rally1;
				Speed			= 40;
				MyGroup 		= 3;
				groupNumber		= 20;
				if (GetMemoryInteger(me,8)==1) then		// This is for the helicopters
					AmPlane		= true;
					Speed		= 110;
				endif;
            endcase;

            case 4:		// Mainforce Rear Attacks
				MyObject		= ena_rally1;
				Speed			= 40;
				MyTactic 		= TACTIC_REAR;
				RadarOff 		= true;
				Visible 		= false;
				MyGroup 		= 4;
				groupNumber		= 20;
            endcase;
			
			case 5:		// Harass helicopters
				AmPlane 		= true;
				PowerDown 		= true;
				MyGroup 		= 5;
				groupNumber 	= 23;
			endcase;
			
			case 6:		// Relief Vehicles
				PowerDown 		= true;
				MyGroup 		= 6;
				groupNumber 	= 21;
			endcase;
			
        endswitch;

endfunction;

//------------------------------------------------------------------
//	StartState: my initial state
//------------------------------------------------------------------

state StartState;

	code
		AssignSkill(SkillLevel);
		
		/* Use a Select Statement to change these for a particular unit
		SetFiringDelay			(ME,minDelay,maxDelay);
		SetIgnoreFriendlyFire	(ME,true);
		SetIsShotRadius			(ME,isShotRadius);
		SetEntropyMood			(ME,mood);
		SetCurMood				(ME,mood);
		SetSkillLevel			(ME,piloting,gunnery,eliteLevel);
		SetAttackThrottle		(ME,attackThrottle);*/
		
		SetAttackThrottle		(ME,50);	// Early mission - attack throttle worse than usual

		if (PowerDown) then
			Shutdown(me);
		endif;
		
		trans Lobby;        

endstate;			

state Lobby;
	code

		if (MyGroup==3) or (MyGroup==4) then	// Mainforce & Mainforce Rear
			trans GoToPlayer;
		endif;
		
		if (MyGroup==5) then		// Harass
			if (Harass) then
				Startup(me);
				OrderTakeOff(10);
				trans GoToPlayer;
			else
				if (IsShot(GroupObjectID(GroupNumber))) then
					Startup(me);
					OrderTakeOff(10);
					trans GoToPlayer;
				else
					if (IsWithin(ME,PlayerMech,700)) then
						Startup(me);
						OrderTakeOff(10);
						trans GoToPlayer;
					endif;
				endif;
			endif;
		endif;
		
		if (MyGroup==6) then		// Relief
			if (Relief) then
				Startup(me);
				trans GoToPlayer;
			else
				if (IsShot(GroupObjectID(GroupNumber))) then
					Startup(me);
					trans GoToPlayer;
				else
					if (IsWithin(ME,PlayerMech,700)) then
						Startup(me);
						trans GoToPlayer;
					endif;
				endif;
			endif;
		endif; 
		
		//Powerdown = WakeNearMe(10,100);

endstate;

state GoToPlayer;
	code

		if (MyGroup<>6) then
			OrderMovetoObject(PlayerMech,100);
		else
			if (not IsWithin(PlayerMech,ena_nav_alpha,800)) then
				OrderMovetoObject(ena_nav_alpha,100);
			else
				OrderMovetoObject(PlayerMech,100);
			endif;
		endif;
		
		
		if (RadarOff) then
			if (IsWithin(me,PlayerMech,200)) then
				SetSensorVisibility(me,TRUE);
				Visible = True;
			else
				SetSensorVisibility(me,FALSE);
				Visible = False;
			endif;
		endif;
		
		if (FindEnemy(AttackRange,FindTypes)) then
			trans Attack;
		endif;

endstate;

state Attack;
	code

		if (LeaveAttackState(WithdrawRange)) then
			trans GoToPlayer;
		endif;
		
		if (MyGroup==6) then
			if (Harass) then
				OrderStopAttacking;
				OrderMovetoObject(ena_nav_alpha,100);
			else
				if (MyTactic == 0) then
					OrderAttack(true);
				else
					OrderAttackTactic(MyTactic,true);
				endif;
			endif;
		else
			if (MyTactic == 0) then
				OrderAttack(true);
			else
				OrderAttackTactic(MyTactic,true);
			endif;
		endif;
		
		if (MyTactic == TACTIC_REAR) then		// If you are the last of Clan MacLeod then stop hitting the rear
			if (GroupSize(GroupObjectID(GroupNumber)) == 1) then
				MyTactic = 0;
			endif;
		endif;

		if (RadarOff) then		// This is to mimic your radar being turned off
			if (IsWithin(me,PlayerMech,200)) then
				SetSensorVisibility(me,TRUE);
				Visible = True;
			else
				SetSensorVisibility(me,FALSE);
				Visible = False;
			endif;
		endif;
		
		if (not EnemyEngaged) then
			EnemyEngaged = True;
		endif;
				
endstate;

//------------------------------------------------------------------
//	FollowPathState: follow our path, but keep an eye out for enemies
//------------------------------------------------------------------

state FollowPathState;
	code
		// if (FindEnemy(fleeRange,FT_DEFAULT)) then
		//	trans FleeState;
		// endif;

		// if (path <> -1) then

		OrderFormationMove(GroupObjectID(GroupNumber),path,speed,movetype,formationtype,formationdensity,false);

endstate;

//------------------------------------------------------------------
//	DeadState: OK, I kicked the bucket.
//------------------------------------------------------------------

state DeadState;
	code
		if (deathSound <> -1) then	
			PlaySoundOnce(deathSound);
		endif;		

		orderDie;

endstate;


endfsm.
