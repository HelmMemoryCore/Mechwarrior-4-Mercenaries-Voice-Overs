//*********************************************************************************

fsm Styk01_Alpha_attack : integer;		

//------------------------------------------------------------------
//
//     Constant Definitions
//
//------------------------------------------------------------------
     const

		#include_ <content\ABLScripts\mwconst.abi>
//------------------------------------------------------------------
//
//     Type Definitions
//
//------------------------------------------------------------------
     type

		#include_ <content\ABLScripts\mwtype.abi>

//------------------------------------------------------------------
//
//     Variable Declarations
//
//------------------------------------------------------------------
	var
		static integer			attackRange;	// At what range do I start shooting?
		static integer			withdrawRange;	// At what range do I stop attacking?
		static integer			skillLevel;
		static integer			memInt9;		// value of Memory Integer number 9
		
		static LocPoint			leashpoint;
		
 function Init;
	code
		// script-specific variables
		attackRange				= 800;
		withdrawRange			= attackRange * 3 / 2;
		skillLevel 				= 3;
		memint9					= GetMemoryInteger(me,9);
		getLocation(ena_Nav_Alpha, leashpoint);			 

endfunction;
		
state StartState;

	code
		assignSkill(skillLevel);
		SetCombatLeash (me, leashpoint, attackRange/2);
		
		switch (memint9)
			case 0:
				trans sit;
			endcase;
			case 1:
				orderTakeOff(1);
				orderMoveToObject( ena_Nav_Alpha, 300);
				trans sit;
			endcase;
		
		endswitch;
endstate;			

state sit;
	code
		if FindEnemy(attackRange, FT_DEFAULT) then
			trans attackState;
		endif;
		
		if ( isDead(me)) then
			trans deadstate;
		endif;
		
		OrderMoveLookOut;

endstate;

state AttackState;

	code
	
		if( leaveAttackState(withdrawrange) ) then
			orderStopAttacking;
			settarget(me, NO_UNIT);
			trans sit;
		else
			OrderAttackTactic(TACTIC_PICK_BEST, true);
		endif;
		
		if ( isDead(me)) then
			trans deadstate;
		endif;
			
endstate;

state deadstate;
	code
		
endstate;

endfsm.
