//*********************************************************************************

fsm Styk01_Tanks : integer;		

//------------------------------------------------------------------
//
//     Constant Definitions
//
//------------------------------------------------------------------
     const

		#include_ <content\ABLScripts\mwconst.abi>
//------------------------------------------------------------------
//
//     Type Definitions
//
//------------------------------------------------------------------
     type

		#include_ <content\ABLScripts\mwtype.abi>

//------------------------------------------------------------------
//
//     Variable Declarations
//
//------------------------------------------------------------------
	var
		static integer			attackRange;	// At what range do I start shooting?
		static integer			withdrawRange;	// At what range do I stop attacking?
		static integer			skillLevel;		// 1 - 10
		static integer			memInt9;		// value of Memory Integer number 9
		static boolean			pathEndReached;

		static integer			unitPath;		// the path the units follow
		static LocPoint			leashPoint;

 function Init;
	code
		// script-specific variables
		attackRange				= 600;
		withdrawRange			= attackRange * 3 / 2;
		skillLevel				= 2;
		pathEndReached			= false;
		unitPath 				= epa_Retreat;
		GetLocation(ena_RavenStart, leashPoint);

endfunction;
		
state StartState;

	code
	
	AssignSkill(SkillLevel);
	SetCombatLeash(me,leashPoint,300);
    trans sit;
		 	
endstate;			

state sit;
	code
	
		if pathEndReached then
			OrderMoveLookOut;
		else
			if OrderMoveResumePatrol(unitPath, 200, MOVE_NOCYCLE, true, true) then
				pathEndreached = true;
			endif;
		endif;
		
		if FindEnemy(attackRange, FT_DEFAULT) then
			trans attackState;
		endif;
			
		if IsDead(me) then
			trans deadState;
		endif;

endstate;

state AttackState;

	code
	
		if( leaveAttackState(withdrawrange) ) then
			orderStopAttacking;
			settarget(me, NO_UNIT);
			trans sit;
		else;
			OrderAttackTactic(TACTIC_PICK_BEST, true);
		endif;
		
		if IsDead(me) then
			trans deadState;
		endif;
			
endstate;

state deadstate;
	code
		
endstate;

endfsm.
