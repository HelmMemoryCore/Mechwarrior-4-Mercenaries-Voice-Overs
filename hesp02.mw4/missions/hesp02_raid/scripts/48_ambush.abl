//*********************************************************************************

fsm Ambush : integer;		

//------------------------------------------------------------------
//
//     Constant Definitions
//
//------------------------------------------------------------------
     const

		#include_ <content\ABLScripts\mwconst.abi>
//------------------------------------------------------------------
//
//     Type Definitions
//
//------------------------------------------------------------------
     type

		#include_ <content\ABLScripts\mwtype.abi>

//------------------------------------------------------------------
//
//     Variable Declarations
//
//------------------------------------------------------------------
	var
		static integer			jumpRange;		// At what range do I stop jumping?
		static integer			chaseRange;		// At what range Can I chase?
		static integer			attackRange;	// At what range do I start shooting?
		static integer			withdrawRange;	// At what range do I stop attacking?
		static integer			skillLevel;		// 1 - 10
		static integer			memInt9;		// value of Memory Integer number 9
		static Boolean			canChase;		// Has the jumper begin chasing
		static integer			attackType;		// what attack tactic does the mech use


 function Init;
	code
		// script-specific variables
		jumpRange				= 250;					   
		chaseRange				= 400;					   
		attackRange				= 600;						
		withdrawRange			= 1200; 
		skillLevel				= 5;						// 1 - 10
		memInt9 				= GetMemoryInteger(me, 9);	// Value of memory integer number 9
		canChase				= false;					// Can the mech give chase?

		attackType				= TACTIC_JUMP_AND_SHOOT;
		
endfunction;
		
state StartState;

	code
		AssignSkill(skillLevel);
		SetSensorVisibility(me, false);		//Unit cannot be seen on Radar
		
        trans sit; 	
endstate;  

state sit;
	code
		if ( SetMyTarget(attackRange) ) then
			attackRange	= 800;						
			trans AttackState;
		endif;
		
		if ( isShot ( me ) ) then
			setTarget(me, whoShot(me) );
			attackRange	= 800;						
			trans AttackState;
		endif;
		
		if isdead(me) then
			trans deadState;
		endif;
		
	   	orderMoveLookout;
		
endstate;

state AttackState;
	var
	static ObjectID	nearFoe;

	code
		nearFoe = GetNearestEnemy(me);
		if (not canChase) then
			if isWithin(me, nearFoe, chaseRange) then
				canChase = true;	 //Mech can now stop jumping if his target flees
			endif;					   
		else
			if (not isWithin(me, nearFoe, attackRange)) then
				attackType = TACTIC_PICK_BEST;			//Target has left fire range, change tactic to chase him
				SetSensorVisibility(me, true);			//Unit can now be seen on Radar
			endif;
		endif;
		
		if isWithin(me, nearFoe, jumpRange) then
			attackType = TACTIC_PICK_BEST;			//no more jumping
			SetSensorVisibility(me, true);			//Unit can now be seen on Radar
		endif;
		
		if( leaveAttackState(withdrawrange) ) then
			orderStopAttacking;
			settarget(me, NO_UNIT);
			trans sit;
		else;
			OrderAttackTactic(attackType, true);
		endif;
		
		if ( isShot ( me ) ) then
			setTarget(me, whoShot(me) );
		endif;
		
		if isdead(me) then
			trans deadState;
		endif;
			
endstate;

state deadstate;
	code
		
endstate;

endfsm.
