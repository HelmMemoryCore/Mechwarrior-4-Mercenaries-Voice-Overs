//*********************************************************************************

fsm Dropers : integer;		

//------------------------------------------------------------------
//
//     Constant Definitions
//
//------------------------------------------------------------------
     const

		#include_ <content\ABLScripts\mwconst.abi>
//------------------------------------------------------------------
//
//     Type Definitions
//
//------------------------------------------------------------------
     type

		#include_ <content\ABLScripts\mwtype.abi>

//------------------------------------------------------------------
//
//     Variable Declarations
//
//------------------------------------------------------------------
	var
		static integer			attackRange;	// At what range do I start shooting?
		static integer			withdrawRange;	// At what range do I stop attacking?
		static integer			skillLevel;		// 1 - 10
		static integer			memInt9;		// value of Memory Integer number 9
		static boolean			pathEndReached;

		static ObjectID			unitPath;		// the path the units follow
		static LocPoint			spawnPoint;
		static integer			speed;			//path speed
		static boolean 			OverRideMove;
		static boolean			landed;
		
 function Init;
	code
		// script-specific variables
		attackRange				= 800;
		withdrawRange			= attackRange * 3 / 2;
		skillLevel				= 5;						// 1 - 10
		memInt9 				= GetMemoryInteger(me, 9);	// Value of memory integer number 9
		pathEndReached 			= false;
		landed					= false;
		speed					= 200;
		unitPath 				= epa_wanderPath02;
		GetLocation(me, spawnPoint);
		
		switch(memint9)
			case 4:
				OverRideMove = false;
				pathEndReached = true;
				orderTakeOff(1);
				SetSensorVisibility(me, false);
			endcase;
			case 5:
				OverRideMove = True;
				skillLevel = skillLevel + 1;		//Mechs are a little better than dropships
				shutdown(me);
				teleportToHell(me);
			endcase;
		endswitch;
		
endfunction;
		
state StartState;

	code
	
		if dropTriggered then
			switch memint9
				case 4:
					AssignSkill(skillLevel);
					resetTimer(29);
					SetSensorVisibility(me, true);
					trans dropState;
				endcase;
				case 5:
					teleport(me, spawnPoint);
					startup(me);
					AssignSkill(skillLevel);
					trans sit;
				endcase;
			endswitch;
		endif;

endstate;

state dropState;
	code
	
		switch(memint9)
			case 4:
				if TimeGreater(29, 6) then
					orderLand;
					trans sit;
				endif;
			endcase;
			case 5:
				if drop(me) then
					trans sit;
				endif;
			endcase;
		endswitch;
	
endstate;

state sit;
	
	code
		if pathEndReached then
			OrderMoveLookout;
		else
			OrderMoveResumePatrol(unitPath, speed, MOVE_CIRCLE, true, OverRideMove)
		endif;
		
		if FindEnemy(attackRange, FT_DEFAULT) then
			trans attackState;
		endif;
		
		if ( isShot ( me ) ) then
			setTarget(me, whoShot(me) );
			trans AttackState;
		endif;
		
		if isdead(me) then
			trans deadState;
		endif;
		
endstate;

state AttackState;

	code
	
		if( leaveAttackState(withdrawrange) ) then
			orderStopAttacking;
			settarget(me, NO_UNIT);
			trans sit;
		else;
			OrderAttackTactic(TACTIC_PICK_BEST, OverRideMove);
		endif;
		
		if ( isShot ( me ) ) then
			setTarget(me, whoShot(me) );
		endif;
		
		if isdead(me) then
			trans deadState;
		endif;
		
		if obj3 then		//Run away when dropships are dead
			unitPath = epa_wanderPath01;
			pathEndReached = false;
			OverRideMove = false;
			orderStopAttacking;
			attackRange	= 1;
			trans sit;
		endif;
			
endstate;

state deadstate;
	code
		
endstate;

endfsm.
