//*********************************************************************************

fsm H03_mechs : integer;		

//------------------------------------------------------------------
//
//     Constant Definitions
//
//------------------------------------------------------------------
     const

		#include_ <content\ABLScripts\mwconst.abi>
//------------------------------------------------------------------
//
//     Type Definitions
//
//------------------------------------------------------------------
     type

		#include_ <content\ABLScripts\mwtype.abi>

//------------------------------------------------------------------
//
//     Variable Declarations
//
//------------------------------------------------------------------
	var
		static integer			attackRange;	// At what range do I start shooting?
		static integer			withdrawRange;	// At what range do I stop attacking?
		static integer			skillLevel;		// 1 - 10
		static integer			memInt9;		// value of Memory Integer number 9
		static integer			MoveType;		
		static boolean			pathEndReached;

		static ObjectID			unitPath;		// the path the units follow
		static LocPoint			spawnPoint;
		static LocPoint			leashPoint;

 function Init;
	code
		// script-specific variables
		attackRange				= 800;
		withdrawRange			= attackRange * 3 / 2;
		skillLevel				= 6;						// 1 - 10
		memInt9 				= GetMemoryInteger(me, 9);	// Value of memory integer number 9
		pathEndReached 			= false;

		switch(memInt9)
			case 0:
				unitPath = epa_OutPostPath;
				MoveType = MOVE_SEESAW;
			endcase;
			case 1:
				unitPath = epa_MechPath01;
				MoveType = MOVE_CIRCLE;
				memInt9 = 0;
			endcase;
			case 2:
				unitPath = epa_MechPath02;
				MoveType = MOVE_CIRCLE;
				memInt9 = 0;
			endcase;
			case 3:
				GetLocation(ena_LeashPoint, leashPoint);
				pathEndReached = true;
			endcase;
			case 4:
				unitPath = epa_PatrolPath;
				GetLocation(ena_spawnPoint01, spawnPoint);
				MoveType = MOVE_NOCYCLE;
				clearMoveOrder(me);
				shutdown(me);
				TeleportToHell(me);
			endcase;
			case 5:
				unitPath = epa_PatrolPath;
				GetLocation(ena_spawnPoint02, spawnPoint);
				MoveType = MOVE_NOCYCLE;
				clearMoveOrder(me);
				shutdown(me);
				TeleportToHell(me);
				memInt9 = 4;
			endcase;
			case 6:
				unitPath = epa_PatrolPath;
				GetLocation(ena_spawnPoint03, spawnPoint);
				MoveType = MOVE_NOCYCLE;
				clearMoveOrder(me);
				shutdown(me);
				TeleportToHell(me);
				memInt9 = 4;
			endcase;
		endswitch;
		

endfunction;
		
state StartState;

	code
	
	AssignSkill(skillLevel);
	trans WaitforLaunch; 	

endstate;

state WaitforLaunch;
	
	code
	switch(memInt9)
		case 0:
			trans sit;
		endcase;
		case 3:
			SetCombatLeash(me, LeashPoint, 300);
			trans sit;
		endcase;
		case 4:
			if obj2 or obj3 then
				teleport(me, spawnPoint);
				startup(me);
				trans sit;
			endif;
		endcase;
	endswitch;
	
	
	if ( isShot ( me ) ) then
		trans sit;
	endif;
	
endstate;		

state sit;
	code
		if (not pathEndReached) then
			if OrderMoveResumePatrol(unitPath, 200, MoveType, true, true) then
				pathEndReached = true;
			endif;
		else
			OrderMoveLookout;
		endif;
		
		if ( SetMyTarget(attackRange) ) then
			trans AttackState;
		endif;
		
		if ( isShot ( me ) ) then
			setTarget(me, whoShot(me) );
			trans AttackState;
		endif;
		
		if isdead(me) then
			trans deadState;
		endif;
		
endstate;

state AttackState;

	code
	
		if( leaveAttackState(withdrawrange) ) then
			orderStopAttacking;
			settarget(me, NO_UNIT);
			trans sit;
		else;
			OrderAttackTactic(TACTIC_PICK_BEST, true);
		endif;
		
		if ( isShot ( me ) ) then
			setTarget(me, whoShot(me) );
		endif;
		
		if isdead(me) then
			trans deadState;
		endif;
			
endstate;

state deadstate;
	code
		
endstate;

endfsm.
