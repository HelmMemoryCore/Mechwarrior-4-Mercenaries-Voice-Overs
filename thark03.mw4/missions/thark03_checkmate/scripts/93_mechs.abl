//*********************************************************************************

fsm mechs : integer;		

//------------------------------------------------------------------
//
//     Constant Definitions
//
//------------------------------------------------------------------
     const

		#include_ <content\ABLScripts\mwconst.abi>
//------------------------------------------------------------------
//
//     Type Definitions
//
//------------------------------------------------------------------
     type

		#include_ <content\ABLScripts\mwtype.abi>

//------------------------------------------------------------------
//
//     Variable Declarations
//
//------------------------------------------------------------------
	var
		static integer			attackRange;	// At what range do I start shooting?
		static integer			withdrawRange;	// At what range do I stop attacking?
		static integer			skillLevel;		// 1 - 10
		static integer			memInt9;		// value of Memory Integer number 9
		static boolean			pathEndReached;

		static ObjectID			unitPath;		// the path the units follow
		static LocPoint			spawnPoint;
		static LocPoint			leashPoint;
		static boolean			hideMe;			// Do I teleport to hell at startup?
		static integer			delayTimer;		// The timer used to for Nondi's delay	
		static integer			delayAmount;	// The time that Nondi waits.

 function Init;
	code
		// script-specific variables
		attackRange				= 800;
		withdrawRange			= attackRange * 3 / 2;
		skillLevel				= 7;						// 1 - 10
		memInt9 				= GetMemoryInteger(me, 9);	// Value of memory integer number 9
		pathEndReached 			= false;
		unitPath 				= NO_UNIT;
		hideMe					= true; 
		GetLocation(me, spawnPoint);
		getLocation(ena_leashNav, leashPoint); 
		
		delayTimer				= GTI_TIMER_5;
		delayAmount				= 90;						// 90 Second delay

		switch(memInt9)
			case 1:
				skillLevel = skillLevel - 1;
				attackRange	= 600;
				withdrawRange = attackRange * 3 / 2;
				pathEndReached = true;
				hideMe = false;
				SetCombatLeash(me, spawnPoint, attackRange); 
			endcase;
			case 2:
				pathEndReached = true;
				hideMe = false; 
			endcase;
			case 3:
				unitPath = epa_MechPath01; 
			endcase;
			case 4:
				unitPath = epa_MechPath02; 
				hideMe = false; 
				SetCombatLeash(me, leashPoint, 550); 
			endcase;
			case 5:
				pathEndReached = true;
				hideMe = false; 
				SetCombatLeash(me, leashPoint, 550); 
			endcase;
			case 6:
				skillLevel = skillLevel + 1;
				unitPath = epa_MechPath03; 
			endcase;
			case 7:
				skillLevel = 10;
				unitPath = epa_MechPath03; 
			endcase;
		endswitch;
		
endfunction;
		
state StartState;

	code
	
	AssignSkill(skillLevel);
	
	if hideMe then
		clearMoveOrder(me);
		shutDown(me);
		teleportToHell(me);
	endif;
	
	trans WaitforLaunch; 	

endstate;

state WaitforLaunch;
	
	code
	switch(memInt9)
		case 1:
			trans sit;
		endcase;
		case 2:
			trans sit;
		endcase;
		case 3:
			if IsWithin(ena_trigger01, playerMech, 1000) then
				teleport(me, spawnPoint);
				startup(me);
                trans sit;
			endif;
		endcase;
		case 4:
			if IsWithin(me, playerMech, 1000) or obj4Revealed then
                trans sit;
			endif;
		endcase;
		case 5:
			trans sit;
		endcase;
		case 6:
			if obj6Revealed then
				teleport(me, spawnPoint);
				startup(me);
				resetTimer(delayTimer);
                trans sit;
			endif;
		endcase;
		case 7:
			if (TimeGreater(delayTimer, delayAmount) and (groupNumDead(steinerGroup) > 1))
			or (GroupNumDead(steinerGroup) > 3) then
				teleport(me, spawnPoint);
				startup(me);
                trans sit;
			endif;
		endcase;
	endswitch;
		
endstate;		

state sit;
	code
		if pathEndReached then
			orderMoveLookOut;
		else
			if OrderMoveResumePatrol(unitPath, 200, MOVE_NOCYCLE, true, true) then
				pathEndReached = true;
			endif;
		endif;
		
		if FindEnemy(attackRange, FT_DEFAULT) then
			trans attackState;
		endif;
		
		if ( isShot ( me ) ) then
			setTarget(me, whoShot(me) );
			trans AttackState;
		endif;
		
		if isdead(me) then
			trans deadState;
		endif;
		
		if obj6 then
			shutdown(me);
			trans deadstate;
		endif;
		
endstate;

state AttackState;

	code
	
		if( leaveAttackState(withdrawrange) ) then
			orderStopAttacking;
			settarget(me, NO_UNIT);
			trans sit;
		else;
			OrderAttackTactic(TACTIC_PICK_BEST, true);
		endif;
		
		if isdead(me) then
			trans deadState;
		endif;
		
		if obj6 then
			shutdown(me);
			trans deadstate;
		endif;
			
endstate;

state deadstate;
	code
		
endstate;

endfsm.
