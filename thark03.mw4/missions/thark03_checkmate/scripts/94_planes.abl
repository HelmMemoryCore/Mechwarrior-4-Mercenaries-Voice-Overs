//*********************************************************************************

fsm planes : integer;		

//------------------------------------------------------------------
//
//     Constant Definitions
//
//------------------------------------------------------------------
     const

		#include_ <content\ABLScripts\mwconst.abi>
//------------------------------------------------------------------
//
//     Type Definitions
//
//------------------------------------------------------------------
     type

		#include_ <content\ABLScripts\mwtype.abi>

//------------------------------------------------------------------
//
//     Variable Declarations
//
//------------------------------------------------------------------
	var
		static integer			attackRange;	// At what range do I start shooting?
		static integer			withdrawRange;	// At what range do I stop attacking?
		static integer			skillLevel;		// 1 - 10
		static integer			memInt9;		// value of Memory Integer number 9
		static boolean			pathEndReached;

		static integer			delayTime;		// The timer used to for taxi delay	
	
		static ObjectID			destination;
		static LocPoint			rallyPoint1;
		static LocPoint			rallyPoint2;
		
 function Init;
	code
		// script-specific variables
		attackRange				= 800;
		withdrawRange			= attackRange * 3 / 2;
		skillLevel				= 9;						// 1 - 10
		memInt9 				= GetMemoryInteger(me, 9);	// Value of memory integer number 9
		pathEndReached 			= false;
		
		GetLocation(ena_planeNav01, rallyPoint1);
		GetLocation(ena_planeNav02, rallyPoint2);
		
		Switch(memInt9)
			case 1:
				DelayTime = 0;
			endcase;
			case 2:
				DelayTime = 0;
			endcase;
			case 3:
				DelayTime = 5;
				memint9 = 2;
			endcase;
			case 4:
				DelayTime = 10;
				memint9 = 2;
			endcase;
			case 5:
				DelayTime = 15;
				memint9 = 2;
			endcase;
			case 6:
				DelayTime = 20;
				memint9 = 2;
			endcase;
			case 7:
				DelayTime = 25;
				memint9 = 2;
			endcase;
		endswitch;
		
		destination = playerMech;
		
endfunction;

function updateDestination;
	var
		static locpoint playerPos;
		static integer x;
		static integer z;
		static integer distance1;
		static integer distance2;
		
	code
		
		GetLocation(playerMech, playerPos);
		x = playerPos[0] - rallyPoint1[0];
		z = playerPos[2] - rallyPoint1[2];
		distance1 = (x*x) + (z*z);
		x = playerPos[0] - rallyPoint2[0];
		z = playerPos[2] - rallyPoint2[2];
		distance2 = (x*x) + (z*z);
		if distance1 > distance2 then
			destination = ena_planeNav01;
		else
			destination = ena_planeNav02;
		endif;
		
endfunction;
		
state StartState;

	code
	
		if IsWithin(ena_Nav_Beta, playerMech, 1000) then
			AssignSkill(skillLevel);
			resetTimer(GTI_TIMER_10);
			SetAutoTargeting(me, false);
			SetTarget(me, PlayerMech);
			trans WaitforLaunch;
		endif; 	

endstate;

state WaitforLaunch;
	
	code
	
	switch(memInt9)
		case 1:
			orderTakeOff(1);
			pathEndReached = true;
			trans sit;
		endcase;
		case 2:
			if TimeGreater(GTI_TIMER_10, delayTime) then
				orderMoveToObject(ena_TaxiPoint01, 600);
				orderTakeOff(425);
				trans TaxiState;
			endif;
		endcase;
	endswitch;
		
endstate;	  

state taxiState;
	code
	
		if orderMoveToObject(ena_TaxiPoint01, 600) then
			trans StrafeState;
		endif;
		
endstate;

state StrafeState;
	code
	
		orderMoveToObject(destination, 600);
		
		if IsWithin(me, destination, 125) then
			if destination == playermech then
				updateDestination;
			else
				destination = playerMech;
			endif;
		endif;
		
		//SetMyTarget(attackRange);
		OrderAttackTactic(TACTIC_PICK_BEST, false);
		
		if IsDead(me) then
			trans deadState;
		endif;
		
endstate;  

state sit;
	code
	
		orderMoveLookOut;
		
		if FindEnemy(attackRange, FT_DEFAULT) then
			trans attackState;
		endif;
		
		if ( isShot ( me ) ) then
			setTarget(me, whoShot(me) );
			trans AttackState;
		endif;
		
		if isdead(me) then
			trans deadState;
		endif;
		
endstate;

state AttackState;

	code
	
		if( leaveAttackState(withdrawrange) ) then
			orderStopAttacking;
			settarget(me, NO_UNIT);
			trans sit;
		else;
			OrderAttackTactic(TACTIC_PICK_BEST, true);
		endif;
		
		if isdead(me) then
			trans deadState;
		endif;
			
endstate;

state deadstate;
	code
		
endstate;

endfsm.
