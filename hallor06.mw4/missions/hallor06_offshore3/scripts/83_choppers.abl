//*********************************************************************************

fsm H01_Choppers : integer;		

//------------------------------------------------------------------
//
//     Constant Definitions
//
//------------------------------------------------------------------
     const

		#include_ <content\ABLScripts\mwconst.abi>
//------------------------------------------------------------------
//
//     Type Definitions
//
//------------------------------------------------------------------
     type

		#include_ <content\ABLScripts\mwtype.abi>

//------------------------------------------------------------------
//
//     Variable Declarations
//
//------------------------------------------------------------------
	var
		static integer			attackRange;	// At what range do I start shooting?
		static integer			withdrawRange;	// At what range do I stop attacking?
		static integer			skillLevel;		// 1 - 10
		static integer			memInt9;		// value of Memory Integer number 9
		static boolean			pathEndReached;
		static ObjectID			unitPath;		// the path the units follow
		
		static LocPoint			spawnPoint;
		static integer			launchDelay;
		
 function Init;
	code
		// script-specific variables
		attackRange				= 800;
		withdrawRange			= AttackRange *3/2;
		skillLevel				= 5;						// 1 - 10
		memInt9 				= GetMemoryInteger(me, 9);	// Value of memory integer number 9
		pathEndReached 			= false;
		unitPath				= epa_ChopperPath;
		GetLocation(ena_ChopperSpawn, spawnPoint);
		launchDelay				= memint9 * 3;				//3 seconds between launches
		
		shutdown(me);
		SetSensorVisibility(me, false);
		
endfunction;
		
state StartState;

	code
	
		if LaunchPlanes then			//Set in Mechs.abl
			AssignSkill(skillLevel);
			resetTimer(26);
			launchDelay = launchDelay + 10;		//10 seconds till choppers show up.
			trans WaitForLaunch;
		endif;

endstate;

state WaitForLaunch;
	code
	
		if TimeGreater(26, launchDelay) then
			teleport(me, spawnPoint);
			startup(me);
			orderTakeOff(1);
			SetSensorVisibility(me, true);
			trans sit;
		endif;
	
endstate;

state sit;
	code
	
		if pathEndReached then
			orderMoveLookOut;
		else
			if OrderMoveResumePatrol(unitPath, 200, MOVE_NOCYCLE, true, true) then
				pathEndReached = true;
			endif;
		endif;
		
		if FindEnemy(attackRange, FT_DEFAULT+FT_BUILDING+FT_UNARMED) then
			trans attackState;
		endif;
		
		if ( isShot ( me ) ) then
			setTarget(me, whoShot(me) );
			trans AttackState;
		endif;
		
		if isdead(me) then
			trans deadState;
		endif;
		
endstate;

state AttackState;

	code
	
		if( leaveAttackState(withdrawrange) ) then
			orderStopAttacking;
			settarget(me, NO_UNIT);
			trans sit;
		else;
			OrderAttackTactic(TACTIC_PICK_BEST, true);
		endif;
		
		if ( isShot ( me ) ) then
			setTarget(me, whoShot(me) );
		endif;
		
		if isdead(me) then
			trans deadState;
		endif;
			
endstate;

state deadstate;
	code
		
endstate;

endfsm.
