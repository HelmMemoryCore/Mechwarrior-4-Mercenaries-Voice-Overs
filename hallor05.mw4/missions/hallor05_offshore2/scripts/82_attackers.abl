//*********************************************************************************

fsm HalloranV01_attackers : integer;		

//------------------------------------------------------------------
//
//     Constant Definitions
//
//------------------------------------------------------------------
     const

		#include_ <content\ABLScripts\mwconst.abi>
//------------------------------------------------------------------
//
//     Type Definitions
//
//------------------------------------------------------------------
     type

		#include_ <content\ABLScripts\mwtype.abi>

//------------------------------------------------------------------
//
//     Variable Declarations
//
//------------------------------------------------------------------
	var
		static integer			attackRange;	// At what range do I start shooting?
		static integer			withdrawRange;	// At what range do I stop attacking?
		static integer			skillLevel;
		
		static ObjectID			unitPath;		// the path the units follow	
		static LocPoint			spawnPoint;
		static LocPoint			hidePoint;		//where units go to hide
		static integer			memint9;		//Memory integer 9
		static integer			memint8;		//Memory integer 8
		static boolean			PathEndReached;
		
 function Init;
	code
		// script-specific variables
		attackRange				= 800;
		withdrawRange			= attackRange * 3 / 2;
		skillLevel				= 2;
		pathEndReached 			= false;
		unitPath				= NO_UNIT;
		memint9 = getMemoryInteger(me,9);
		memint8 = getMemoryInteger(me,8);
		switch(memint9)
			case 1:
				switch(memint8)
					case 1:
						GetLocation(ena_spawnPoint101, spawnPoint);
						unitPath = epa_AttackPath101;
					endcase;
					case 2:
						GetLocation(ena_spawnPoint102, spawnPoint);
						unitPath = epa_AttackPath101;
					endcase;
					case 3:
						GetLocation(ena_spawnPoint103, spawnPoint);
						unitPath = epa_AttackPath101;
					endcase;
					case 4:
						GetLocation(ena_spawnPoint111, spawnPoint);
						unitPath = epa_AttackPath102;
					endcase;
					case 5:
						GetLocation(ena_spawnPoint112, spawnPoint);
						unitPath = epa_AttackPath102;
					endcase;
					case 6:
						GetLocation(ena_spawnPoint113, spawnPoint);
						unitPath = epa_AttackPath102;
					endcase;
				endswitch;
			endcase;
			case 2:
				skillLevel = skillLevel + 1;
				switch(memint8)
					case 1:
						GetLocation(ena_spawnPoint201, spawnPoint);
						unitPath = epa_AttackPath201;
					endcase;
					case 2:
						GetLocation(ena_spawnPoint202, spawnPoint);
						unitPath = epa_AttackPath201;
					endcase;
					case 3:
						GetLocation(ena_spawnPoint203, spawnPoint);
						unitPath = epa_AttackPath201;
					endcase;
					case 4:
						GetLocation(ena_spawnPoint211, spawnPoint);
						unitPath = epa_AttackPath202;
					endcase;
					case 5:
						GetLocation(ena_spawnPoint212, spawnPoint);
						unitPath = epa_AttackPath202;
					endcase;
					case 6:
						GetLocation(ena_spawnPoint213, spawnPoint);
						unitPath = epa_AttackPath202;
					endcase;
				endswitch;
			endcase;
		endswitch;
		
endfunction;
		
state StartState;
	code

		if startTheFun then
			AssignSkill(skillLevel);
			SetSkillLevel(me, 300, -1, -1);			//Bump up the piloting skill
			ClearMoveOrder(me);
			shutdown(me);
			SetSensorVisibility(me, false);
			resetTimer(20);		
			trans waitForLaunch;
		endif;
		
endstate;			

state waitForLaunch;
	code
	
	switch(memint9)
		case 1:
            if timeGreater(20, 5) then
				teleport(me, spawnPoint);
				startup(me);
				SetSensorVisibility(me, true);
				trans sit;
			endif;
		endcase;
		case 2:
            if timeGreater(20, 65) or groupAllDead(groupObjectID(20)) then
				teleport(me, spawnPoint);
				startup(me);
				SetSensorVisibility(me, true);
				hoversLaunched = true;
				trans sit;
			endif;
		endcase;
	endswitch;
		
endstate;

state sit;
	code
	
		if pathEndReached then
			orderMoveLookOut;
		else
			if OrderMoveResumePatrol(unitPath, 200, MOVE_NOCYCLE, true, false) then
				pathEndReached = true;
			endif;
		endif;
	
		if FindEnemy(attackRange, FT_DEFAULT + FT_BUILDING) then
			trans attackState;
		endif;
		
		if ( isShot ( me ) ) then
			setTarget(me, whoShot(me) );
			trans AttackState;
		endif;
		
		if ( isDead(me)) then
			trans deadstate;
		endif;
		
		if IsWithin(me, ena_HidePoint, 500) then
			ClearMoveOrder(me);
			teleport(me, spawnPoint);
		endif;

endstate;

state AttackState;

	code
	
		if( leaveAttackState(withdrawrange) ) then
			orderStopAttacking;
			settarget(me, NO_UNIT);
			trans sit;
		else
			OrderAttackTactic(TACTIC_PICK_BEST, false);
		endif;
		
		if ( isDead(me)) then
			trans deadstate;
		endif;
			
		if IsWithin(me, ena_HidePoint, 500) then
			ClearMoveOrder(me);
			teleport(me, spawnPoint);
		endif;

endstate;

state deadstate;
	code
		
endstate;


endfsm.
