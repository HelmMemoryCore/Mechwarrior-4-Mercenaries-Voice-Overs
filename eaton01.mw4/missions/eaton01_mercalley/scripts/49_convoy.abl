
//------------------------------------------------------------------
// NOTE: The fsm name below MUST be changed in order for the
// script to be considered a unique entity!
//------------------------------------------------------------------

fsm Convoy : integer;


//------------------------------------------------------------------
// Moving AI:
//   This script controls movers that do not go aggressive.
//------------------------------------------------------------------

//------------------------------------------------------------------
//     Constants
//------------------------------------------------------------------

	const
		#include_ <content\ABLScripts\mwconst.abi>

//------------------------------------------------------------------
//     Types
//------------------------------------------------------------------

	type
		#include_ <content\ABLScripts\mwtype.abi>
	
//------------------------------------------------------------------
//     Variables
//------------------------------------------------------------------

	var
		
    // Standard Mech and Vehicle variables
        static integer			attackRange;		// At what range do I start shooting?
		static integer			withdrawRange;		// At what range do I withdraw from combat completely?
                                                    //
		static integer			piloting;			// Piloting skill
		static integer			gunnery;			// Gunnery skill/chance to hit
		static real				minDelay;			// Minimum amount of time I will wait between shots once a weapon is reloaded
		static real				maxDelay;			// Maximum amount of time I will wait between shots once a weapon is reloaded
		static integer 			eliteLevel;			// Elite level.  This helps determine tactics, defensive manuevers, opportunity fire
													// and other things.  It indicates a general level of combat experience.
		static integer			attackThrottle;		// My attack throttle
		static integer			findTypes;			// What kind of enemies to look for
													//
        static integer			path;	            // What path to take.
        static integer			speed;	            // Speed on the path.
		static integer			MyGroup;			// Which MemoryInteger you work for
		static integer			GroupNumber;		// What's my group -- i.e. I will use GroupObjectID(groupNumber) to identify my group
		static integer			formationType;		// What kind of formation am I in?
		static integer			formationDensity;	// How densely are we packed?
		static integer			moveType;			// How I move along the path
                                                    //
 		static integer			isShotRadius;		// How far away from me will I detect an enemy shot?
                                                    //
		static integer 			attackSound;		// The attack sound I play when I first attack
		static integer 			deathSound;			// The sound I play when I die
		                                            //
		static integer			mood;				// My default 
		static integer			takeOffDistance;	// My take-off distance if I'm an airplane (ignored if not an airplane)
    //
		
		static integer			fleeRange;			// At what range do I start running?
		static integer			fleeSpeed;			// How fast I flee
		static integer			position;			// How far behind the convoy leader are you
		static integer			IAm;				// Used for the convoy leader

//------------------------------------------------------------------
//     Init: my initialization function
//------------------------------------------------------------------

function Init;
	code
		// script-specific variables
		fleeRange		= 500;
		withdrawRange	= fleeRange * 3 / 2;
		groupNumber		= 10;
		path			= epa_convoypath;
		moveType		= move_nocycle;
		speed			= 30;
		formationType	= 1;	//formation_1x12Line;
		formationDensity= formtype_sparse;
		fleeSpeed		= 600;

		takeOffDistance	= 150;

		// driver settings
		piloting		= 50;
		gunnery			= 30;
		minDelay		= 1.5;
		maxDelay		= 3.0;
		eliteLevel		= 30;
		attackThrottle	= 80;
		isShotRadius	= 120;
		attackSound		= -1; // no sound
		deathSound		= -1; // no sound
		mood			= NEUTRAL_START;

		SetAlignment(me,NEUTRAL);

endfunction;

//------------------------------------------------------------------
//	StartState: my initial state
//------------------------------------------------------------------

state StartState;

	code
		SetFiringDelay			(ME,minDelay,maxDelay);
		SetIgnoreFriendlyFire	(ME,true);
		SetIsShotRadius			(ME,isShotRadius);
		SetEntropyMood			(ME,mood);
		SetCurMood				(ME,mood);
		SetSkillLevel			(ME,piloting,gunnery,eliteLevel);
		SetAttackThrottle		(ME,attackThrottle);
				
		trans FollowPathState;

endstate;			

state ExitNow;
	code

		OrderMovetoObject(ena_exit,100);

		if (IsWithin(me,ena_exit,400)) then
			Destroy(me);
			trans deadstate;
		endif;

endstate;

//------------------------------------------------------------------
//	FollowPathState: follow our path, but keep an eye out for enemies
//------------------------------------------------------------------

state FollowPathState;
	code
		// if (FindEnemy(fleeRange,FT_DEFAULT)) then
		//	trans FleeState;
		// endif;

		// if (path <> -1) then

		OrderFormationMove(GroupObjectID(GroupNumber),path,speed,movetype,formationtype,formationdensity,false);

		if (IsWithin(ena_exit,me,520)) then
			Destroy(me);
			trans DeadState;
		endif;

		/*if (IsWithin(me,ena_exit,2000)) then
			ClearMoveOrder(me);
			trans ExitNow;
		endif;*/

		/*if (IsWithin(me,PlayerMech,600)) then
			ClearMoveOrder(me);
			trans Coward;
		else*/
			if (Obj1) then
				ClearMoveOrder(me);
				trans Coward;
			endif;
		//endif;

endstate;

state Coward;
	code

		ClearMoveOrder(me);

		if (not obj1) then
			if (not IsWithin(PlayerMech,me,600)) then
				trans FollowPathState;
			endif;
		endif;

endstate;

//------------------------------------------------------------------
//	FleeState: run away from my target
//------------------------------------------------------------------

state FleeState;
	code
		if (LeaveAttackState(withdrawRange)) then
			ClearMoveOrder(ME);
			SetTarget(ME,NO_UNIT);
			trans FollowPathState;
		endif;

		if (attackSound <> -1) then	
			PlaySoundOnce(attackSound);
		endif;

		OrderMoveFlee(GetTarget(ME),fleeSpeed);

endstate;

//------------------------------------------------------------------
//	DeadState: OK, I kicked the bucket.
//------------------------------------------------------------------

state DeadState;
	code
		if (deathSound <> -1) then	
			PlaySoundOnce(deathSound);
		endif;		

		orderDie;

endstate;


endfsm.
