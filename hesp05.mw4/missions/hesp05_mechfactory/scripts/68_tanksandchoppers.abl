//*********************************************************************************

fsm tanksAndChoppers : integer;		

//------------------------------------------------------------------
//
//     Constant Definitions
//
//------------------------------------------------------------------
     const

		#include_ <content\ABLScripts\mwconst.abi>
//------------------------------------------------------------------
//
//     Type Definitions
//
//------------------------------------------------------------------
     type

		#include_ <content\ABLScripts\mwtype.abi>

//------------------------------------------------------------------
//
//     Variable Declarations
//
//------------------------------------------------------------------
	var
		static integer			attackRange;	// At what range do I start shooting?
		static integer			withdrawRange;	// At what range do I stop attacking?
		static integer			skillLevel;		// 1 - 10
		static integer			memInt9;		// value of Memory Integer number 9
		static boolean			pathEndReached;

		static ObjectID			unitPath;		// the path the units follow
		static LocPoint			spawnPoint;

		static integer			speed;			//path speed
		
		static integer			startupTime;
		static integer			heliTimer;
		
 function Init;
	code
		// script-specific variables
		attackRange				= 800;
		withdrawRange			= attackRange * 3 / 2;
		skillLevel				= 5;						// 1 - 10
		memInt9 				= GetMemoryInteger(me, 9);	// Value of memory integer number 9
		pathEndReached 			= false;
		speed					= 200;
		heliTimer				= gti_timer_31;
				
		switch (memint9)
			case 1:
				unitPath = epa_helipath;
				startupTime	= rand(60, 90);
			endcase;
			case 2:
				unitPath = NO_UNIT;
				startupTime	= 1;
			endcase;
			case 3:
				unitPath = NO_UNIT;
				startupTime	= rand(150, 210);
			endcase;
		endswitch;
		
		//resetTimer(heliTimer);
		
endfunction;
		
state StartState;

	code
	
	if startTheFun then
		AssignSkill(skillLevel);
		resetTimer(heliTimer);
		trans waitState;
	endif;

endstate;

state waitState;
		
	code
	
		if timeGreater(heliTimer, startupTime) then
			orderTakeoff(1);
			trans sit;
		endif;

		
endstate;

state sit;
	code
		if pathEndReached or (unitPath == NO_UNIT) then
			OrderMoveLookout;
		else
			if OrderMoveResumePatrol(unitPath, speed, MOVE_NOCYCLE, true, true) then
				pathEndReached = true;
			endif;
		endif;
		
		if FindEnemy(attackRange, FT_DEFAULT + FT_BUILDING) then
			trans attackState;
		endif;
		
		if ( isShot ( me ) ) then
			setTarget(me, whoShot(me) );
			trans AttackState;
		endif;
		
		if isdead(me) then
			trans deadState;
		endif;
		
endstate;

state AttackState;

	code
	
		if( leaveAttackState(withdrawrange) ) then
			orderStopAttacking;
			settarget(me, NO_UNIT);
			trans sit;
		else;
			OrderAttackTactic(TACTIC_PICK_BEST, true);
		endif;
		
		if ( isShot ( me ) ) then
			setTarget(me, whoShot(me) );
		endif;
		
		if isdead(me) then
			trans deadState;
		endif;
			
endstate;

state deadstate;
	code
		
endstate;

endfsm.
